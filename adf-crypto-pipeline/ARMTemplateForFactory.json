{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-crypto-pipeline"
		},
		"ls_crypopipestoorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://cryptopipestorage.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_bronze_to_silver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_bronze_to_silver",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_bronze_to_silver",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RawSource": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ArchiveRaw",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_bronze_to_silver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "coins_markets/*/*/*/*",
										"type": "Expression"
									},
									"wildcardFileName": "*.jsonl.gz",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_raw_binary",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_archive_coins",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DeleteRaw",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "ArchiveRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_delete_coins",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "ls_crypopipestoorage",
									"type": "LinkedServiceReference"
								},
								"path": "archive"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "df_silver_to_gold",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "df_bronze_to_silver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_silver_to_gold",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcSilver": {},
									"SinkGold": {},
									"SinkDLQ": {},
									"SinkDL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-05T20:43:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_bronze_to_silver')]",
				"[concat(variables('factoryId'), '/datasets/ds_raw_binary')]",
				"[concat(variables('factoryId'), '/datasets/ds_archive_coins')]",
				"[concat(variables('factoryId'), '/datasets/ds_delete_coins')]",
				"[concat(variables('factoryId'), '/dataflows/df_silver_to_gold')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_crypopipestoorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_proc_raw_to_silver_hardened')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_raw_binary",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If Condition1_copy1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(item().name, 'coins_markets')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "df_bronze_to_silver_copy1",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "0.00:20:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "df_bronze_to_silver",
														"type": "DataFlowReference",
														"parameters": {},
														"datasetParameters": {
															"RawSource": {},
															"sink1": {},
															"sink2": {}
														}
													},
													"staging": {},
													"compute": {
														"coreCount": 8,
														"computeType": "General"
													},
													"traceLevel": "Fine",
													"runConcurrently": true
												}
											},
											{
												"name": "Copy data1_copy1",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "df_bronze_to_silver_copy1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.00:20:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"wildcardFolderPath": "coins_markets/*/*/*/*",
															"wildcardFileName": "*.json.gz",
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings",
															"copyBehavior": "PreserveHierarchy",
															"metadata": [
																{
																	"name": "copyraw",
																	"value": "$$LASTMODIFIED"
																}
															]
														}
													},
													"enableStaging": false,
													"logSettings": {
														"enableCopyActivityLog": true,
														"copyActivityLogSettings": {
															"logLevel": "Info",
															"enableReliableLogging": false
														},
														"logLocationSettings": {
															"linkedServiceName": {
																"referenceName": "ls_crypopipestoorage",
																"type": "LinkedServiceReference"
															},
															"path": "logger/raw_copy_logs"
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ds_raw_binary",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_archive_coins",
														"type": "DatasetReference",
														"parameters": {}
													}
												]
											},
											{
												"name": "Copy data3_copy1",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "df_bronze_to_silver_copy1",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"wildcardFolderPath": "coins_markets/*/*/*/*",
															"wildcardFileName": "*.jsonl.gz",
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings",
															"copyBehavior": "PreserveHierarchy"
														}
													},
													"enableStaging": false,
													"enableSkipIncompatibleRow": true,
													"logSettings": {
														"enableCopyActivityLog": true,
														"copyActivityLogSettings": {
															"logLevel": "Info",
															"enableReliableLogging": false
														},
														"logLocationSettings": {
															"linkedServiceName": {
																"referenceName": "ls_crypopipestoorage",
																"type": "LinkedServiceReference"
															},
															"path": "logger/raw_error_logs"
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ds_raw_binary",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_deadletter_binary",
														"type": "DatasetReference",
														"parameters": {}
													}
												]
											},
											{
												"name": "Copy data4_copy1",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Copy data1_copy1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "JsonSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"wildcardFolderPath": "**/*",
															"wildcardFileName": "*.parquet",
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "JsonReadSettings"
														}
													},
													"sink": {
														"type": "JsonSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings",
															"copyBehavior": "FlattenHierarchy"
														},
														"formatSettings": {
															"type": "JsonWriteSettings",
															"filePattern": "setOfObjects"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ds_deadletter_json",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_metadata",
														"type": "DatasetReference",
														"parameters": {
															"fileName": "@concat('metadata_', item().name, '_', pipeline().RunId, '.json')"
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"fileName": {
						"type": "string",
						"defaultValue": "@concat('metadata_', item().name, '_', pipeline().RunId, '.json')"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_raw_binary')]",
				"[concat(variables('factoryId'), '/dataflows/df_bronze_to_silver')]",
				"[concat(variables('factoryId'), '/datasets/ds_archive_coins')]",
				"[concat(variables('factoryId'), '/datasets/ds_deadletter_binary')]",
				"[concat(variables('factoryId'), '/datasets/ds_deadletter_json')]",
				"[concat(variables('factoryId'), '/datasets/ds_metadata')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_crypopipestoorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Jsonl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_crypopipestoorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "coins_markets",
						"fileSystem": "raw"
					},
					"compression": {
						"type": "gzip",
						"level": "Optimal"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string"
						},
						"symbol": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"image": {
							"type": "string"
						},
						"current_price": {
							"type": "number"
						},
						"market_cap": {
							"type": "integer"
						},
						"market_cap_rank": {
							"type": "integer"
						},
						"fully_diluted_valuation": {
							"type": "integer"
						},
						"total_volume": {
							"type": "integer"
						},
						"high_24h": {
							"type": "number"
						},
						"low_24h": {
							"type": "number"
						},
						"price_change_24h": {
							"type": "number"
						},
						"price_change_percentage_24h": {
							"type": "number"
						},
						"market_cap_change_24h": {
							"type": "integer"
						},
						"market_cap_change_percentage_24h": {
							"type": "number"
						},
						"circulating_supply": {
							"type": "number"
						},
						"total_supply": {
							"type": "number"
						},
						"max_supply": {
							"type": "number"
						},
						"ath": {
							"type": "number"
						},
						"ath_change_percentage": {
							"type": "number"
						},
						"ath_date": {
							"type": "string"
						},
						"atl": {
							"type": "number"
						},
						"atl_change_percentage": {
							"type": "number"
						},
						"atl_date": {
							"type": "string"
						},
						"roi": {
							"type": "object",
							"properties": {
								"times": {
									"type": "number"
								},
								"currency": {
									"type": "string"
								},
								"percentage": {
									"type": "number"
								}
							}
						},
						"last_updated": {
							"type": "string"
						},
						"price_change_percentage_1h_in_currency": {
							"type": "number"
						},
						"price_change_percentage_24h_in_currency": {
							"type": "number"
						},
						"price_change_percentage_7d_in_currency": {
							"type": "number"
						},
						"_ingested_at_utc": {
							"type": "string"
						},
						"year": {
							"type": "string"
						},
						"month": {
							"type": "string"
						},
						"day": {
							"type": "string"
						},
						"hour": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_crypopipestoorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_crypopipestoorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "coins",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_crypopipestoorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_archive_coins')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_crypopipestoorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "coins",
						"fileSystem": "archive"
					},
					"compression": {
						"type": "gzip",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_crypopipestoorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_deadletter_binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_crypopipestoorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "deadletter"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_crypopipestoorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_deadletter_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_crypopipestoorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "deadletter"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_crypopipestoorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_delete_coins')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_crypopipestoorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "coins_markets",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_crypopipestoorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dlq_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_crypopipestoorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "coins",
						"fileSystem": "dlq"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_crypopipestoorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_gold_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_crypopipestoorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "coins",
						"fileSystem": "gold"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_crypopipestoorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_metadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_crypopipestoorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"fileSystem": "metadata"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_crypopipestoorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_raw_binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_crypopipestoorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "coins_markets",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_crypopipestoorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_silver_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_crypopipestoorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "coins",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_crypopipestoorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_crypopipestoorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_crypopipestoorage_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/triggerfor1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2025-09-05T17:35:00",
						"endTime": "2025-09-06T12:00:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_bronze_to_silver')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Jsonl",
								"type": "DatasetReference"
							},
							"name": "RawSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "ls_crypopipestoorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_deadletter_json",
								"type": "DatasetReference"
							},
							"name": "sink2",
							"rejectedDataLinkedService": {
								"referenceName": "ls_crypopipestoorage",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "DerivedColumns"
						},
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          symbol as string,",
						"          name as string,",
						"          image as string,",
						"          current_price as double,",
						"          market_cap as integer,",
						"          market_cap_rank as integer,",
						"          fully_diluted_valuation as integer,",
						"          total_volume as integer,",
						"          high_24h as double,",
						"          low_24h as double,",
						"          price_change_24h as double,",
						"          price_change_percentage_24h as double,",
						"          market_cap_change_24h as integer,",
						"          market_cap_change_percentage_24h as double,",
						"          circulating_supply as double,",
						"          total_supply as double,",
						"          max_supply as double,",
						"          ath as double,",
						"          ath_change_percentage as double,",
						"          ath_date as string,",
						"          atl as double,",
						"          atl_change_percentage as double,",
						"          atl_date as string,",
						"          roi as (times as double, currency as string, percentage as double),",
						"          last_updated as string,",
						"          price_change_percentage_1h_in_currency as double,",
						"          price_change_percentage_24h_in_currency as double,",
						"          price_change_percentage_7d_in_currency as double,",
						"          {_ingested_at_utc} as string,",
						"          year as string,",
						"          month as string,",
						"          day as string,",
						"          hour as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'source_file',",
						"     documentForm: 'documentPerLine') ~> RawSource",
						"split1@valid derive(ingestion_time = currentUTC(),",
						"          source_file = split(source_file, '/')[size(split(source_file, '/')) - 1]) ~> DerivedColumns",
						"RawSource split(!isNull(symbol) && current_price > 0,",
						"     disjoint: false) ~> split1@(valid, invalid)",
						"split1@invalid derive(fail_reason = \"invalid row\") ~> derivedColumn1",
						"DerivedColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:(concat(toString(year(currentUTC())), '/',\r",
						"       lpad(toString(month(currentUTC())),2,'0'), '/',\r",
						"       lpad(toString(dayOfMonth(currentUTC())),2,'0'), '/',\r",
						"       lpad(toString(hour(currentUTC())),2,'0'))\r",
						"),",
						"     umask: 0622,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_fileSystem: 'logger',",
						"     assertFailure_folderPath: 'df_bronze_to_silver_errors') ~> sink1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     filePattern:(concat(toString(year(currentUTC())), '/',       lpad(toString(month(currentUTC())),2,'0'), '/',       lpad(toString(dayOfMonth(currentUTC())),2,'0'), '/',       lpad(toString(hour(currentUTC())),2,'0'))),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Jsonl')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_crypopipestoorage')]",
				"[concat(variables('factoryId'), '/datasets/ds_deadletter_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_silver_to_gold')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_silver_parquet",
								"type": "DatasetReference"
							},
							"name": "SrcSilver"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_gold_parquet",
								"type": "DatasetReference"
							},
							"name": "SinkGold",
							"rejectedDataLinkedService": {
								"referenceName": "ls_crypopipestoorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_dlq_parquet",
								"type": "DatasetReference"
							},
							"name": "SinkDLQ",
							"rejectedDataLinkedService": {
								"referenceName": "ls_crypopipestoorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_dlq_parquet",
								"type": "DatasetReference"
							},
							"name": "SinkDL",
							"rejectedDataLinkedService": {
								"referenceName": "ls_crypopipestoorage",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "DcNormalize"
						},
						{
							"name": "CsQuality"
						},
						{
							"name": "WinDedupe"
						},
						{
							"name": "DcPriceFail"
						},
						{
							"name": "DcIDFail"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          symbol as string,",
						"          name as string,",
						"          image as string,",
						"          current_price as double,",
						"          market_cap as integer,",
						"          market_cap_rank as integer,",
						"          fully_diluted_valuation as integer,",
						"          total_volume as integer,",
						"          high_24h as double,",
						"          low_24h as double,",
						"          price_change_24h as double,",
						"          price_change_percentage_24h as double,",
						"          market_cap_change_24h as integer,",
						"          market_cap_change_percentage_24h as double,",
						"          circulating_supply as double,",
						"          total_supply as double,",
						"          max_supply as double,",
						"          ath as double,",
						"          ath_change_percentage as double,",
						"          ath_date as string,",
						"          atl as double,",
						"          atl_change_percentage as double,",
						"          atl_date as string,",
						"          roi as (times as double, currency as string, percentage as double),",
						"          last_updated as string,",
						"          price_change_percentage_1h_in_currency as double,",
						"          price_change_percentage_24h_in_currency as double,",
						"          price_change_percentage_7d_in_currency as double,",
						"          {_ingested_at_utc} as string,",
						"          year as string,",
						"          month as string,",
						"          day as string,",
						"          hour as string,",
						"          ingestion_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'source_file',",
						"     format: 'parquet',",
						"     wildcardPaths:['*/*/*/*']) ~> SrcSilver",
						"SrcSilver derive(symbol = lower(symbol),",
						"          last_updated_ts = toTimestamp(last_updated, \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"),",
						"          current_price = toDecimal(current_price, 18, 8),",
						"          market_cap = toLong(market_cap),",
						"          ingestion_time = currentUTC()) ~> DcNormalize",
						"DcNormalize split(isNull(symbol) || symbol == '',",
						"     !isNull(current_price) && current_price < 0,",
						"     disjoint: false) ~> CsQuality@(InvalidMissingID, InvalidPrice, Valid)",
						"CsQuality@Valid window(desc(last_updated_ts, true),",
						"     desc(ingestion_time, true),",
						"     row_num = rowNumber()) ~> WinDedupe",
						"CsQuality@InvalidPrice derive(fail_reason = \"negative price\") ~> DcPriceFail",
						"CsQuality@InvalidMissingID derive(fail_reason = \"missing id\") ~> DcIDFail",
						"WinDedupe sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:(concat(toString(year(currentUTC())), '/',\r",
						"       lpad(toString(month(currentUTC())),2,'0'), '/',\r",
						"       lpad(toString(dayOfMonth(currentUTC())),2,'0'), '/',\r",
						"       lpad(toString(hour(currentUTC())),2,'0'))\r",
						"),",
						"     umask: 0222,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2) ~> SinkGold",
						"DcIDFail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1) ~> SinkDLQ",
						"DcPriceFail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 3) ~> SinkDL"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_silver_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_gold_parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_crypopipestoorage')]",
				"[concat(variables('factoryId'), '/datasets/ds_dlq_parquet')]"
			]
		}
	]
}