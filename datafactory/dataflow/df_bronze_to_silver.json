{
	"name": "df_bronze_to_silver",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Jsonl",
						"type": "DatasetReference"
					},
					"name": "RawSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "ls_crypopipestoorage",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "ds_deadletter_json",
						"type": "DatasetReference"
					},
					"name": "sink2",
					"rejectedDataLinkedService": {
						"referenceName": "ls_crypopipestoorage",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "DerivedColumns",
					"description": "Creating/updating the columns 'id, symbol, name, image, current_price, market_cap, market_cap_rank, fully_diluted_valuation, total_volume, high_24h, low_24h, price_change_24h, price_change_percentage_24h, market_cap_change_24h, market_cap_change_percentage_24h, circulating_supply, total_supply, max_supply, ath, ath_change_percentage, ath_date, atl, atl_change_percentage, atl_date, roi, last_updated, price_change_percentage_1h_in_currency, price_change_percentage_24h_in_currency, price_change_percentage_7d_in_currency, _ingested_at_utc, source_file, ingestion_time'"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          symbol as string,",
				"          name as string,",
				"          image as string,",
				"          current_price as decimal(18,8),",
				"          market_cap as long,",
				"          market_cap_rank as long,",
				"          fully_diluted_valuation as long,",
				"          total_volume as long,",
				"          high_24h as decimal(18,8),",
				"          low_24h as decimal(18,8),",
				"          price_change_24h as decimal(18,8),",
				"          price_change_percentage_24h as decimal(18,8),",
				"          market_cap_change_24h as decimal(38,8),",
				"          market_cap_change_percentage_24h as decimal(18,8),",
				"          circulating_supply as decimal(38,8),",
				"          total_supply as decimal(38,8),",
				"          max_supply as decimal(38,8),",
				"          ath as decimal(18,8),",
				"          ath_change_percentage as decimal(18,8),",
				"          ath_date as string,",
				"          atl as decimal(18,8),",
				"          atl_change_percentage as decimal(18,8),",
				"          atl_date as string,",
				"          roi as (times as double, currency as string, percentage as double),",
				"          last_updated as string,",
				"          price_change_percentage_1h_in_currency as double,",
				"          price_change_percentage_24h_in_currency as double,",
				"          price_change_percentage_7d_in_currency as double,",
				"          {_ingested_at_utc} as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          hour as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     rowUrlColumn: 'source_file',",
				"     documentForm: 'documentPerLine') ~> RawSource",
				"split1@valid derive(source_file = replace(\r",
				"    split(source_file, '/')[size(split(source_file, '/'))],\r",
				"    '.jsonl.gz',\r",
				"    ''\r",
				")) ~> DerivedColumns",
				"RawSource split(!isNull(symbol) && current_price > 0,",
				"     disjoint: false) ~> split1@(valid, invalid)",
				"split1@invalid derive(fail_reason = \"invalid row\") ~> derivedColumn1",
				"DerivedColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     filePattern:(concat(toString(year(currentUTC())), '/',\r",
				"       lpad(toString(month(currentUTC())),2,'0'), '/',\r",
				"       lpad(toString(dayOfMonth(currentUTC())),2,'0'), '/',\r",
				"       lpad(toString(hour(currentUTC())),2,'0'))\r",
				"),",
				"     umask: 0622,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_fileSystem: 'logger',",
				"     assertFailure_folderPath: 'df_bronze_to_silver_errors') ~> sink1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     filePattern:(concat(toString(year(currentUTC())), '/',       lpad(toString(month(currentUTC())),2,'0'), '/',       lpad(toString(dayOfMonth(currentUTC())),2,'0'), '/',       lpad(toString(hour(currentUTC())),2,'0'))),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2"
			]
		}
	}
}